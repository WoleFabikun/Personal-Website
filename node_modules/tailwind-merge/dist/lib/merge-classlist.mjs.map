{"version":3,"file":"merge-classlist.mjs","sources":["../../src/lib/merge-classlist.ts"],"sourcesContent":["import { ConfigUtils } from './config-utils'\n\nconst SPLIT_CLASSES_REGEX = /\\s+/\nconst IMPORTANT_MODIFIER = '!'\n\nexport function mergeClassList(classList: string, configUtils: ConfigUtils) {\n    const { getClassGroupId, getConflictingClassGroupIds } = configUtils\n\n    /**\n     * Set of classGroupIds in following format:\n     * `{importantModifier}{variantModifiers}{classGroupId}`\n     * @example 'float'\n     * @example 'hover:focus:bg-color'\n     * @example 'md:!pr'\n     */\n    const classGroupsInConflict = new Set<string>()\n\n    return (\n        classList\n            .trim()\n            .split(SPLIT_CLASSES_REGEX)\n            .map((originalClassName) => {\n                const { modifiers, hasImportantModifier, baseClassName } =\n                    splitModifiers(originalClassName)\n\n                const classGroupId = getClassGroupId(baseClassName)\n\n                if (!classGroupId) {\n                    return {\n                        isTailwindClass: false as const,\n                        originalClassName,\n                    }\n                }\n\n                const variantModifier = sortModifiers(modifiers).join('')\n\n                const modifierId = hasImportantModifier\n                    ? variantModifier + IMPORTANT_MODIFIER\n                    : variantModifier\n\n                return {\n                    isTailwindClass: true as const,\n                    modifierId,\n                    classGroupId,\n                    originalClassName,\n                }\n            })\n            .reverse()\n            // Last class in conflict wins, so we need to filter conflicting classes in reverse order.\n            .filter((parsed) => {\n                if (!parsed.isTailwindClass) {\n                    return true\n                }\n\n                const { modifierId, classGroupId } = parsed\n\n                const classId = modifierId + classGroupId\n\n                if (classGroupsInConflict.has(classId)) {\n                    return false\n                }\n\n                classGroupsInConflict.add(classId)\n\n                getConflictingClassGroupIds(classGroupId).forEach((group) =>\n                    classGroupsInConflict.add(modifierId + group),\n                )\n\n                return true\n            })\n            .reverse()\n            .map((parsed) => parsed.originalClassName)\n            .join(' ')\n    )\n}\n\nconst SPLIT_MODIFIER_REGEX = /[:[\\]]/g\n\nfunction splitModifiers(className: string) {\n    const modifiers = []\n\n    let bracketDepth = 0\n    let modifierStart = 0\n    let match: RegExpExecArray | null\n\n    while ((match = SPLIT_MODIFIER_REGEX.exec(className))) {\n        if (match[0] === ':') {\n            if (bracketDepth === 0) {\n                const nextModifierStart = match.index! + 1\n                modifiers.push(className.substring(modifierStart, nextModifierStart))\n                modifierStart = nextModifierStart\n            }\n        } else if (match[0] === '[') {\n            bracketDepth++\n        } else if (match[0] === ']') {\n            bracketDepth--\n        }\n    }\n\n    const baseClassNameWithImportantModifier =\n        modifiers.length === 0 ? className : className.substring(modifierStart)\n    const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER)\n    const baseClassName = hasImportantModifier\n        ? baseClassNameWithImportantModifier.substring(1)\n        : baseClassNameWithImportantModifier\n\n    return {\n        modifiers,\n        hasImportantModifier,\n        baseClassName,\n    }\n}\n\n/**\n * Sorts modifiers according to following schema:\n * - Predefined modifiers are sorted alphabetically\n * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it\n */\nfunction sortModifiers(modifiers: string[]) {\n    if (modifiers.length <= 1) {\n        return modifiers\n    }\n\n    const sortedModifiers: string[] = []\n    let unsortedModifiers: string[] = []\n\n    modifiers.forEach((modifier) => {\n        const isArbitraryVariant = modifier[0] === '['\n\n        if (isArbitraryVariant) {\n            sortedModifiers.push(...unsortedModifiers.sort(), modifier)\n            unsortedModifiers = []\n        } else {\n            unsortedModifiers.push(modifier)\n        }\n    })\n\n    sortedModifiers.push(...unsortedModifiers.sort())\n\n    return sortedModifiers\n}\n"],"names":["SPLIT_CLASSES_REGEX","IMPORTANT_MODIFIER","mergeClassList","classList","configUtils","getClassGroupId","getConflictingClassGroupIds","classGroupsInConflict","Set","trim","split","map","originalClassName","splitModifiers","modifiers","hasImportantModifier","baseClassName","classGroupId","isTailwindClass","variantModifier","sortModifiers","join","modifierId","reverse","filter","parsed","classId","has","add","forEach","group","SPLIT_MODIFIER_REGEX","className","bracketDepth","modifierStart","match","exec","nextModifierStart","index","push","substring","baseClassNameWithImportantModifier","length","startsWith","sortedModifiers","unsortedModifiers","modifier","isArbitraryVariant","sort"],"mappings":"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"}